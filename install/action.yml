name: 'Install HELICS'
description: 'Installs HELICS from releases or a nightly build'

inputs:
  version:
    description: 'HELICS version to install. Default is `v3`. Use `nightly` to install the latest successful nightly HELICS build.'
    default: 'v3'
  prefix:
    description: 'Install prefix for HELICS. Default is /usr/local on Linux/macOS, and C:/local/helics on Windows'
outputs:
  version:
    description: 'Version of HELICS that was installed'
    value: ${{ steps.newest-matching-version.outputs.version }}
  prefix:
    description: 'HELICS install prefix'
runs:
  using: "composite"
  steps:
    - id: newest-matching-version
      shell: bash
      run: |
        # composite run step actions don't support if for the yaml, so do the conditional check here
        if [[ "${{inputs.version}}" != "nightly" ]];
        then
          # list most recent 30 releases, ignore "Pre-release" lines, then get the most recent tag that matches
          NEWEST_VERSION_MATCH=$(gh release list --repo GMLC-TDC/HELICS --limit 100 | grep -v "Pre-release" | cut -f3 | grep "${{ inputs.version }}" | head -n1)
          echo "::set-output name=version::$(echo $NEWEST_VERSION_MATCH)"
        fi

    - id: download-install-helics
      shell: bash
      run: |
        tmpdir=$(mktemp -d)
        pushd tmpdir
        # Download HELICS release based on the platform
        case "$(uname -s)" in
          Linux*) platname="Linux-x86_64" && ext="tar.gz" && prefix="/usr/local";;
          Darwin*) platname="macOS-x86_64" && ext="zip" && prefix="/usr/local";;
          MINGW*) platname="win64" && ext="zip" && prefix="C:/local/helics";;
          *) exit 1
        esac
        if [[ "${{inputs.prefix}}" != "" ]]; then prefix="${{inputs.prefix}}"; fi
        HELICS_VERSION="${{steps.newest-matching-version.outputs.version}}"
        INSTALLER_DIRNAME="Helics-${HELICS_VERSION:1}-${platname}.${ext}"
        INSTALLER_ARCHIVE="${INSTALLER_DIRNAME}.${ext}"
        curl -O -L "https://github.com/GMLC-TDC/HELICS/releases/download/v${HELICS_VERSION:1}/${INSTALLER_ARCHIVE}"
        # Extract HELICS archive
        7z x "${INSTALLER_ARCHIVE}"
        # "Install" HELICS
        cp ${INSTALLER_DIRNAME}/* ${prefix}/
        # add to PATH on Windows
        if [[ "$(uname -s)" == MINGW* || "${{inputs.prefix}}" != "" ]]; then echo "${prefix}/bin" >> "${GITHUB_PATH}}"; fi
        echo "::set-output name=prefix::$(echo ${prefix})"
        popd
        rm -rf tmpdir
